rules_version = '2';
service firebase.storage {
  match /b/{bucket}/o {
    
    // ============================================
    // HELPER FUNCTIONS
    // ============================================
    
    // Check if the request is authenticated
    function isAuthenticated() {
      return request.auth != null;
    }
    
    // Check if the authenticated user is an admin
    function isAdmin() {
      return isAuthenticated() && 
             request.auth.token.admin == true;
    }
    
    // Get memorial document from Firestore - with caching for performance
    function getMemorial(memorialId) {
      return firestore.get(/databases/(default)/documents/memorials/$(memorialId));
    }
    
    // Check if the authenticated user is the owner of the memorial
    function isOwner(memorialId) {
      let memorial = getMemorial(memorialId);
      return isAuthenticated() && (
        request.auth.uid == memorial.data.creatorUid ||
        request.auth.uid == memorial.data.createdByUserId
      );
    }
    
    // Check if the authenticated user is a family member of the memorial
    function isFamilyMember(memorialId) {
      return isAuthenticated() && 
             firestore.exists(/databases/(default)/documents/memorials/$(memorialId)/familyMembers/$(request.auth.uid));
    }
    
    // Check if user can upload photos (owner, family member, or admin)
    function canUploadPhotos(memorialId) {
      return isAuthenticated() && (
        isAdmin() ||
        isOwner(memorialId) ||
        isFamilyMember(memorialId)
      );
    }
    
    // Check if user can delete photos (owner or admin only)
    function canDeletePhotos(memorialId) {
      return isAuthenticated() && (
        isAdmin() || 
        isOwner(memorialId)
      );
    }
    
    // Validate file is an image with proper size
    function isValidImageUpload() {
      return request.resource.size < 10 * 1024 * 1024 && // Max 10MB
             request.resource.contentType.matches('image/.*'); // Images only
    }
    
    // Validate allowed image types more strictly
    function isAllowedImageType() {
      return request.resource.contentType in [
        'image/jpeg',
        'image/jpg', 
        'image/png',
        'image/gif',
        'image/webp',
        'image/svg+xml',
        'image/heic',
        'image/heif'
      ];
    }
    
    // ============================================
    // MEMORIAL PHOTOS RULES
    // ============================================
    
    // Rules for memorial photo storage
    match /memorials/{memorialId}/{allPaths=**} {
      // Public read access for all memorial photos
      allow read: if true;
      
      // Create/Update: Restricted to authenticated users with proper roles
      // Must be valid image file under 10MB
      allow create: if canUploadPhotos(memorialId) &&
                      isValidImageUpload() &&
                      isAllowedImageType();
                      
      allow update: if canUploadPhotos(memorialId) &&
                      isValidImageUpload() &&
                      isAllowedImageType();
      
      // Delete: Only owners and admins can delete photos
      allow delete: if canDeletePhotos(memorialId);
    }
    
    // ============================================
    // MEMORIAL THUMBNAILS (if needed)
    // ============================================
    
    // Rules for auto-generated thumbnails (if using Firebase Extensions)
    match /memorials/{memorialId}/thumbnails/{thumbnail} {
      // Public read access for thumbnails
      allow read: if true;
      
      // Only system/admin can create thumbnails
      allow create, update: if isAdmin();
      
      // Same delete permissions as original photos
      allow delete: if canDeletePhotos(memorialId);
    }
    
    // ============================================
    // TEMPORARY UPLOADS (for processing)
    // ============================================
    
    // Temporary upload area for photo processing
    match /temp/{userId}/{tempFile} {
      // Users can only access their own temp files
      allow read: if isAuthenticated() && request.auth.uid == userId;
      
      // Users can upload to their own temp directory
      allow create: if isAuthenticated() && 
                      request.auth.uid == userId &&
                      isValidImageUpload() &&
                      isAllowedImageType();
      
      // Users can update their own temp files
      allow update: if isAuthenticated() && 
                      request.auth.uid == userId &&
                      isValidImageUpload() &&
                      isAllowedImageType();
      
      // Users can delete their own temp files
      allow delete: if isAuthenticated() && request.auth.uid == userId;
    }
    
    // ============================================
    // PROFILE PHOTOS (if needed)
    // ============================================
    
    // User profile photos
    match /users/{userId}/profile/{fileName} {
      // Public read for profile photos
      allow read: if true;
      
      // Users can upload their own profile photo
      allow create, update: if isAuthenticated() && 
                              request.auth.uid == userId &&
                              request.resource.size < 5 * 1024 * 1024 && // 5MB limit for profile photos
                              request.resource.contentType.matches('image/.*');
      
      // Users can delete their own profile photo
      allow delete: if isAuthenticated() && 
                      request.auth.uid == userId;
    }
    
    // ============================================
    // BACKUP/EXPORT FILES (admin only)
    // ============================================
    
    // Backup and export files
    match /backups/{backup=**} {
      // Only admins can read backups
      allow read: if isAdmin();
      
      // Only admins can create/update backups
      allow create, update: if isAdmin();
      
      // Only admins can delete backups
      allow delete: if isAdmin();
    }
    
    // ============================================
    // DEFAULT DENY RULE
    // ============================================
    
    // Deny all other paths not explicitly defined
    match /{document=**} {
      allow read, write: if false;
    }
  }
}
